package com.voracious.ep1cG4m3.screens;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import com.voracious.ep1cG4m3.entities.Player;
import com.voracious.ep1cG4m3.framework.Level;
import com.voracious.ep1cG4m3.framework.Screen;
import com.voracious.ep1cG4m3.framework.Tile;
import com.voracious.ep1cG4m3.tiles.Brick;
import com.voracious.ep1cG4m3.utils.Art;
import com.voracious.ep1cG4m3.utils.ScreenResultListener;
import com.voracious.ep1cG4m3.utils.Text;

public class Play extends Screen {

    /**
     * Generated by eclipse
     */
    private static final long serialVersionUID = -1522258565924156537L;
    public static final double GRAVITY = 1.8;

    public static int currentLevel = 1;
    public static int currentWorld = 1;

    private Level level;

    private Player player;
    private Text versionNum;
    private Rectangle viewWindow = new Rectangle(0, 0, 640, 512);

    public Play(ScreenResultListener game, int id) {
	super(game, id);
    }

    @Override
    public void start() {
	player = new Player();
	level = new Level();
	versionNum = new Text("Version 0.1a", new Point(35, 35), 12, 1, Color.BLACK);
	requestFocusInWindow();
	addKeyListener(new KeyAdapter() {
	    public void keyPressed(KeyEvent e) {
		player.keyPressed(e);
	    }

	    public void keyReleased(KeyEvent e) {
		player.keyReleased(e);
	    }
	});

    }

    public Player getPlayer() {
	return player;
    }

    public void loadNextLevel() {
	currentLevel++;
	if (currentLevel > 10) {
	    currentLevel = 1;
	    currentWorld++;
	}
	level.loadNextLevel();
    }

    int x = 0;
    int y = 0;
    
    @Override
    public void update() {
	player.update(System.currentTimeMillis());
    }

    @Override
    public void draw(Graphics g) {
	Tile[][] tiles = level.getTiles();
	int ri = 0, ci = 0; //Row iterator, column iterator
	for(int r = viewWindow.x/Tile.tileSize; r<(viewWindow.width + viewWindow.x)/Tile.tileSize; r++){
	    for(int c = viewWindow.y/Tile.tileSize; c<(viewWindow.height + viewWindow.y)/Tile.tileSize; c++){
		if(tiles[r][c] != null){
		    if(!tiles[r][c].getLocation().equals(new Point(ri*Tile.tileSize, ci*Tile.tileSize)))
		    	tiles[r][c].setLocation(new Point(ri*Tile.tileSize, ci*Tile.tileSize));
		    tiles[r][c].paintIcon(this, g);
		}
		ci++;
	    }
	    ri++;
	    ci = 0;
	}
	
	player.paintIcon(this, g);
	versionNum.paintIcon(this, g);
    }
}
